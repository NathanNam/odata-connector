/**
* Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
* The software in this package is published under the terms of the CPAL v1.0
* license, a copy of which has been included with this distribution in the
* LICENSE.txt file.
**/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.odata;

import org.apache.commons.lang.StringUtils;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;

/**
 * Mule Cloud Connector that provides the basic operations to consume
 * an OData service using managed basic authentication
 *  
 * @author mariano.gonzalez@mulesoft.com
 */
@Connector(name = "odata", schemaVersion = "1.0", friendlyName = "OData Connector with Authentication", minMuleVersion = "3.3", configElementName="config")
public class ODataConnector extends BaseODataConnector {
	
	/**
	 * private field to hold the username to be used as connection key
	 */
	private String username;
	
	/**
	 * Creates a new OData Consumer
	 * 
	 * @param username used to authenticate
	 * @param password used to authenticate
	 * @param serviceUri The OData service root uri
	 */
	@Connect
	public void connect(@ConnectionKey String username, @Password String password, @Optional String serviceUri) throws ConnectionException {
		serviceUri = StringUtils.isEmpty(serviceUri) ? this.getBaseServiceUri() : serviceUri;
		synchronized (this) {
			this.setConsumer(this.getConsumerFactory().newConsumer(serviceUri, getFormatType(), username, password, getConsumerVersion()));
		}
		this.username = username;
	}
	
	/**
	 * Destroyes the OData Consumer
	 */
	@Disconnect
	public synchronized void disconnect() {
		this.setConsumer(null);
	}
	
	/**
	 * Returns true if a consumer has been created
	 * @return
	 */
	@ValidateConnection
	public boolean isConnected() {
		return this.getConsumer() != null;
	}
	
	/**
	 * Uses the username as connection identifier
	 * @return
	 */
	@ConnectionIdentifier
	public String getConnectionKey() {
		return this.username;
	}
	
}
