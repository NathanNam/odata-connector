/**
* Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
* The software in this package is published under the terms of the CPAL v1.0
* license, a copy of which has been included with this distribution in the
* LICENSE.txt file.
**/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.odata;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtilsBean;
import org.apache.commons.lang.StringUtils;
import org.core4j.Enumerable;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.modules.odata.factory.ODataConsumerFactory;
import org.mule.modules.odata.factory.ODataConsumerFactoryImpl;
import org.odata4j.consumer.ODataConsumer;
import org.odata4j.core.Guid;
import org.odata4j.core.OCreateRequest;
import org.odata4j.core.OEntity;
import org.odata4j.core.OModifyRequest;
import org.odata4j.core.OProperties;
import org.odata4j.core.OProperty;
import org.odata4j.core.OQueryRequest;
import org.odata4j.edm.EdmSimpleType;
import org.odata4j.format.FormatType;

/**
 * Generic module
 *
 * @author MuleSoft, Inc.
 */
@Module(name="odata", schemaVersion="1.0-SNAPSHOT")
public class ODataModule {
	
	@Configurable
	private String baseServiceUri;
	
	@Configurable
	@Optional
	private String username;
	
	@Configurable
	@Optional
	private String password;
	
	@Configurable
	@Optional
	private ODataConsumerFactory consumerFactory;
	
	private ODataConsumer consumer;
	
	@Configurable
	@Optional
	@Default("LOWER_CAMEL_CASE")
	private PropertyNamingFormat namingFormat = PropertyNamingFormat.LOWER_CAMEL_CASE;
	
	@Configurable
	@Optional
	@Default("JSON")
	private FormatType formatType = FormatType.JSON;
	
	@Start
	public void init() {
		if (this.consumerFactory == null) {
			this.consumerFactory = new ODataConsumerFactoryImpl();
		}
		
		this.consumer = this.consumerFactory.newConsumer(this.baseServiceUri, this.formatType, this.username, this.password);
	}

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/OData-connector.xml.sample odata:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     */
    @Processor
    @SuppressWarnings("unchecked")
    public List<Object> getEntitiesAsPojos(
    						String returnClass,
    						String entitySetName,
    						@Optional String filter,
    						@Optional String orderBy,
    						@Optional Integer skip,
    						@Optional Integer top,
    						@Optional String select) {
    	
    	Class<?> clazz = null;
    	
    	try {
    		clazz = Class.forName(returnClass);
    	} catch (ClassNotFoundException e) {
    		throw new IllegalArgumentException(String.format("return class %s not found in classpath", returnClass), e);
    	}
    	
    	
    	OQueryRequest<?> request =  this.consumer.getEntities(clazz, entitySetName)
										.filter(filter)
										.orderBy(orderBy)
										.select(select);
    	
    	if (skip != null) {
    		request.skip(skip);
    	}
    	
    	if (top != null) {
    		request.top(top);
    	}
    	
    	return (List<Object>) request.execute().toList();
    }
    
    @Processor
    public OEntity createEntityFromPojo(@Optional @Default("#[payload:]") Object pojo, @Optional String entitySetName) {
    	OCreateRequest<OEntity> entity = this.consumer.createEntity(this.getEntitySetName(pojo, entitySetName));
    	Collection<OProperty<?>> properties = this.populateODataProperties(pojo);

		if (properties != null) {
			entity.properties(properties);
		}
		
		return entity.execute();
    }
    
    @Processor
    public void updateEntityFromPojo(@Optional @Default("#[payload:]") Object pojo, @Optional String entitySetName, Object keyValue) {
    	OModifyRequest<OEntity> request = this.consumer.mergeEntity(this.getEntitySetName(pojo, entitySetName), keyValue);
    	Collection<OProperty<?>> properties = this.populateODataProperties(pojo);

		if (properties != null) {
			request.properties(properties);
		}
		
		request.execute();
    }
    
    @Processor
    public void deleteEntity(@Optional @Default("#[payload:]") Object pojo, @Optional String entitySetName, String keyAttribute) {
    	PropertyUtilsBean propertyUtils = new PropertyUtilsBean();
    	Object keyValue = null;
    	
    	try {
    		keyValue = propertyUtils.getProperty(propertyUtils, keyAttribute);
    	} catch (IllegalAccessException e) {
    		this.handleReadPropertyException(pojo, keyAttribute, e);
    	} catch (NoSuchMethodException e) {
    		this.handleReadPropertyException(pojo, keyAttribute, e);
    	} catch (InvocationTargetException e) {
    		this.handleReadPropertyException(pojo, keyAttribute, e);
    	}
    	
    	this.consumer.deleteEntity(this.getEntitySetName(pojo, entitySetName), keyValue);
    }
    
    private void handleReadPropertyException(Object pojo, String propertyName, Exception e) {
    	throw new RuntimeException(String.format("Could not read property %s on pojo of class %s", propertyName, pojo.getClass().getCanonicalName()), e);
    }
    
    private String getEntitySetName(Object pojo, String entitySetName) {
    	if (pojo == null) {
    		throw new IllegalArgumentException("cannot use a null pojo");
    	}
    	
    	return StringUtils.isBlank(entitySetName) ? pojo.getClass().getSimpleName() + "Set" : entitySetName; 
    }
     
    private <T> Collection<OProperty<?>> populateODataProperties(T object) {
		Map<String, PropertyDescriptor> properties = this.describe(object.getClass());
		
		if (properties.isEmpty()) {
			return null;
		}
		
		Collection<OProperty<?>> result = new ArrayList<OProperty<?>>(properties.size());
		
		try {
			for (PropertyDescriptor prop : properties.values()) {
				Object value = prop.getReadMethod().invoke(object, (Object[]) null);
				
				if (value != null) {
					
					String key = this.namingFormat.toOData(prop.getName());
					
					if (value instanceof Guid) {
						result.add(OProperties.guid(key, (Guid) value));
					} else if (this.isSimpleType(value)) {
						result.add(OProperties.simple(key, value));
					}
				}
			}
		} catch (Exception e) {
			
		}
		
		return result;
	}
    
	private <T> Map<String, PropertyDescriptor> describe(Class<T> clazz) {
		BeanInfo info = null;
		try {
			info = Introspector.getBeanInfo(clazz);
		} catch (IntrospectionException e) {
			throw new RuntimeException();
		}
		
		Map<String, PropertyDescriptor> map = new HashMap<String, PropertyDescriptor>();
		for (PropertyDescriptor property : info.getPropertyDescriptors()) {
			if (property.getReadMethod() != null && property.getWriteMethod() != null) {
				map.put(property.getName(), property);
			}
		}
		
		return map;
	}
	
	private boolean isSimpleType(Object value) {
		return this.isSimpleType(value.getClass());
	}
	
	private boolean isSimpleType(Class<?> clazz) {
		return EdmSimpleType.forJavaType(clazz) != null;
	}
    
	public String getBaseServiceUri() {
		return baseServiceUri;
	}

	public void setBaseServiceUri(String baseServiceUri) {
		this.baseServiceUri = baseServiceUri;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public ODataConsumerFactory getConsumerFactory() {
		return consumerFactory;
	}

	public void setConsumerFactory(ODataConsumerFactory consumerFactory) {
		this.consumerFactory = consumerFactory;
	}

	public ODataConsumer getConsumer() {
		return consumer;
	}

	public void setConsumer(ODataConsumer consumer) {
		this.consumer = consumer;
	}

	public PropertyNamingFormat getNamingFormat() {
		return namingFormat;
	}

	public void setNamingFormat(PropertyNamingFormat namingFormat) {
		this.namingFormat = namingFormat;
	}

	public FormatType getFormatType() {
		return formatType;
	}

	public void setFormatType(FormatType formatType) {
		this.formatType = formatType;
	}
	
}
